/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool dfs(TreeNode* root, TreeNode* subRoot) {
        if (root == nullptr && subRoot == nullptr) return true;
        if (root == nullptr || subRoot == nullptr) return false;
        if (root -> val != subRoot -> val) return false;
        return dfs(root -> left, subRoot -> left) && dfs(root -> right, subRoot -> right);
    }
    bool isSubtree(TreeNode* root, TreeNode* subRoot) {
        queue<TreeNode*> q;
        q.push(root);
        while (!q.empty()) {
            if (q.front() -> val == subRoot -> val && dfs(q.front(), subRoot)) return true;
            if (q.front() -> left != nullptr) q.push(q.front() -> left);
            if (q.front() -> right != nullptr) q.push(q.front() -> right);
            q.pop();
        }
        return false;
    }
};