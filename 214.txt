class Solution {
public:
    // bool judgeString(string& s, int end) {
    //     for (int i = 0; i < end; i ++, end --) {
    //         if (s[i] != s[end]) return false;
    //     }
    //     return true;
    // }
    // string ans(string& s, int end) {
    //     if (judgeString(s, end)) return s;
    //     char c[2] = {s[end], 0};
    //     return c + ans(s, end - 1);
    // }
    // string shortestPalindrome(string s) {
    //     return ans(s, s.size() - 1);
    // }
    int ne[50010];
    string shortestPalindrome(string s) {
        memset(ne, -1, sizeof ne);
        for (int i = 1, j = -1; i < s.size(); i ++) {
            while (j != -1 && s[j + 1] != s[i]) j = ne[j];
            if (s[j + 1] == s[i]) j += 1;
            ne[i] = j;
        }
        int j = -1;
        for (int i = s.size() - 1; i >= 0; i --) {
            // cout << i << "  " << j << endl;
            while (j != -1 && s[j + 1] != s[i]) j = ne[j];
            if (s[j + 1] == s[i]) j += 1;
            if (j >= i) {
                if (j == i) j += j;
                else j = j + j - 1;
                break;
            }
        }
        // cout << j;
        if (j + 1 == s.size()) return s;
        string ss;
        ss = s.substr(j + 1, s.size() - j - 1);
        // cout <<  ss;
        reverse(ss.begin(), ss.end());
        return ss + s;
    }
};