class Solution {
public:
    void quick_sort(vector<int>& nums, int left, int right) {
        if (left >= right) return;
        int l = left, r = right, mid = nums[left];
        while (l < r) {
            while (l < r && nums[r] >= mid) r --;
            while (l < r && nums[l] <= mid) l ++;
            swap(nums[l], nums[r]);
        }
        swap(nums[l], nums[left]);
        quick_sort(nums, left, l);
        quick_sort(nums, l + 1, right);
    }
    int threeSumClosest(vector<int>& nums, int target) {
        quick_sort(nums, 0, nums.size() - 1);
        int ans = 0x3f3f3f3f, xx = 0x3f3f3f3f;
        for (int i = 0; i < nums.size(); i ++) {
            if (i && i < nums.size() &&  nums[i] == nums[i - 1]) i ++;
            int j = i + 1, k = nums.size() - 1, sum;
            while (j < k) {
                sum = nums[i] + nums[j] + nums[k];
                if (xx > abs(sum - target)) {
                    xx = abs(sum - target);
                    if (xx == 0) return target;
                    ans = sum;
                }
                if (sum > target) {
                    k --;
                    while (j < k && nums[k] == nums[k + 1]) k --;
                }
                else if (sum < target) {
                    j ++;
                    while (j < k && nums[j] == nums[j - 1]) j ++;
                }
            }
        }
        return ans;
    }
};